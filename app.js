!function(){"use strict";angular.module("ngVkNewsfeedSearch",["ngRoute","ngAnimate","ngSanitize","angular-carousel"]).config(["$locationProvider","$routeProvider","$httpProvider",function(t,e,n){t.hashPrefix("!"),e.otherwise({redirectTo:"/"})}]).factory("Database",["$rootScope",function(t){return{query:"",nextFrom:"",groups:[],profiles:[],posts:[]}}]).factory("Alerts",function(){return{show:function(t){$("#alert-text").html(t),$("#alert").modal("toggle")}}}).factory("HTTP",["$rootScope",function(t){return{jsonp:function(e,n,o){$.ajax({url:e,type:"GET",dataType:"jsonp",crossDomain:!0,success:function(e){console.log("Url:",this.url),console.log("Response:",e),console.log("--------------------------"),t.$apply(function(){return 0===e.response.count?void o():void n(e)})}})}}}]).directive("ngEnterClick",function(){return function(t,e,n){e.bind("keydown keypress",function(e){13===e.which&&(t.$apply(function(){t.$eval(n.ngEnterClick)}),e.preventDefault())})}}).filter("getInfo",function(){return function(t,e,n,o){var r="user",a=t.from_id,c="";switch("-"==t.from_id.toString().charAt(0)&&(r="group",a=t.from_id.toString().substr(1)),r){case"user":"photo"===e&&(c=o[a].photo_50),"name"===e&&(c=o[a].first_name+" "+o[a].last_name);break;case"group":"photo"===e&&(c=n[a].photo_50),"name"===e&&(c=n[a].name)}return c}}).filter("replaceIDs",function(){return function(t){for(var e,n=/\[(group|club|id)(\d*)\|([a-zA-Z0-9А-Яа-я\s]+)\]/gi,o=t;null!==(e=n.exec(o));){e.index===n.lastIndex&&n.lastIndex++;var r,a,c,i;e.forEach(function(t,e,n){switch(e){case 0:r=t;break;case 1:a=t;break;case 2:c=t;break;case 3:i=t}}),o=o.replace(r,'<a href="https://www.vk.com/'+a+c+'" target="_blank">'+i+"</a>")}return o}}).filter("filterPostType",function(){return function(t,e){var n=[],o="photo";return e&&(o=e),t.forEach(function(t,e,r){t.type==o&&n.push(t)}),n}}).run(["$rootScope","$location","Database",function(t,e,n){t.$on("$routeChangeStart",function(t,o,r){0===n.posts.length&&e.path("/")})}])}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
