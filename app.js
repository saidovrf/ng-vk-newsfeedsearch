!function(){"use strict";angular.module("ngVkNewsfeedSearch",["ngRoute","ngAnimate","ngSanitize","angular-carousel"]).config(["$locationProvider","$routeProvider","$httpProvider",function(t,r,e){t.hashPrefix("!"),r.otherwise({redirectTo:"/"})}]).factory("Database",["$rootScope",function(t){return{query:"",nextFrom:"",groups:[],profiles:[],posts:[]}}]).filter("getInfo",function(){return function(t,r,e,o){var n="user",a=t.from_id,i="";switch("-"==t.from_id.toString().charAt(0)&&(n="group",a=t.from_id.toString().substr(1)),n){case"user":"photo"===r&&(i=o[a].photo_50),"name"===r&&(i=o[a].first_name+" "+o[a].last_name);break;case"group":"photo"===r&&(i=e[a].photo_50),"name"===r&&(i=e[a].name)}return i}}).filter("replaceIDs",function(){return function(t){for(var r,e=/\[(group|club|id)(\d*)\|([a-zA-Z0-9А-Яа-я\s]+)\]/gi,o=t;null!==(r=e.exec(o));){r.index===e.lastIndex&&e.lastIndex++;var n,a,i,u;r.forEach(function(t,r,e){switch(r){case 0:n=t;break;case 1:a=t;break;case 2:i=t;break;case 3:u=t}}),o=o.replace(n,'<a href="https://www.vk.com/'+a+i+'" target="_blank">'+u+"</a>")}return o}}).filter("filterPostType",function(){return function(t,r){var e=[],o="photo";return r&&(o=r),t.forEach(function(t,r,n){t.type==o&&e.push(t)}),e}}).run(["$rootScope","$location","Database",function(t,r,e){t.$on("$routeChangeStart",function(t,o,n){0===e.posts.length&&r.path("/")})}])}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
